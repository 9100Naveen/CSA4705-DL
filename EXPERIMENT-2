{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMKSvM6mLnnrRzgQEQM9p1O",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/9100Naveen/CSA4705-DL/blob/main/EXPERIMENT-2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "RxuXuNBEyEML",
        "outputId": "5e36b6cc-2b0f-4795-de63-b7b38b710e39"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "===== MODEL PERFORMANCE =====\n",
            "Simple Model - Training Accuracy: 0.970\n",
            "Simple Model - Testing Accuracy:  0.965\n",
            "\n",
            "\n",
            "Overfitted Model - Training Accuracy: 1.000\n",
            "Overfitted Model - Testing Accuracy:  0.942\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# ------------------------------------------------------------\n",
        "# Verification of Overfitting using a Numerical Dataset\n",
        "# ------------------------------------------------------------\n",
        "\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Step 1: Load numerical dataset\n",
        "data = load_breast_cancer()\n",
        "X, y = data.data, data.target\n",
        "\n",
        "# Step 2: Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Step 3: Build two models - simple and overfitted\n",
        "# Model 1: Simple Decision Tree (limited depth)\n",
        "simple_model = DecisionTreeClassifier(max_depth=3, random_state=42)\n",
        "simple_model.fit(X_train, y_train)\n",
        "\n",
        "# Model 2: Overfitted Decision Tree (deep tree)\n",
        "overfit_model = DecisionTreeClassifier(max_depth=None, random_state=42)\n",
        "overfit_model.fit(X_train, y_train)\n",
        "\n",
        "# Step 4: Evaluate both models\n",
        "# --- Simple Model\n",
        "train_acc_simple = accuracy_score(y_train, simple_model.predict(X_train))\n",
        "test_acc_simple = accuracy_score(y_test, simple_model.predict(X_test))\n",
        "\n",
        "# --- Overfitted Model\n",
        "train_acc_overfit = accuracy_score(y_train, overfit_model.predict(X_train))\n",
        "test_acc_overfit = accuracy_score(y_test, overfit_model.predict(X_test))\n",
        "\n",
        "# Step 5: Print performance\n",
        "print(\"===== MODEL PERFORMANCE =====\")\n",
        "print(f\"Simple Model - Training Accuracy: {train_acc_simple:.3f}\")\n",
        "print(f\"Simple Model - Testing Accuracy:  {test_acc_simple:.3f}\")\n",
        "print(\"\\n\")\n",
        "print(f\"Overfitted Model - Training Accuracy: {train_acc_overfit:.3f}\")\n",
        "print(f\"Overfitted Model - Testing Accuracy:  {test_acc_overfit:.3f}\")\n",
        "\n",
        "# Step 6: Visualization\n",
        "labels = ['Training', 'Testing']\n",
        "simple_scores = [train_acc_simple, test_acc_simple]\n",
        "overfit_scores = [train_acc_overfit, test_acc_overfit]\n",
        "\n",
        "x = range(len(labels))\n",
        "\n",
        "plt.figure(figsize=(7,5))\n",
        "plt.bar(x, simple_scores, width=0.35, label='Simple Model', align='center')\n",
        "plt.bar([p + 0.35 for p in x], overfit_scores, width=0.35, label='Overfitted Model', align='center')\n",
        "plt.xticks([p + 0.17 for p in x], labels)\n",
        "plt.ylim([0.8, 1.05])\n",
        "plt.title('Verification of Overfitting Issue')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    }
  ]
}